<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
  version="4.0"
  metadata-complete="true"> 
  
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/context/service-context.xml
			/WEB-INF/context/security-context.xml
		</param-value>
	</context-param> 
	 
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>ContextConfigLocation</param-name>
			<param-value>/WEB-INF/context/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<!-- 디스패쳐 사용 시에 로드 할 경우, context file이 여러개이거나, 용량이 많아서 로드가 길어지는 경우를 방지하기 위해 첫 페이지 로드 시 해당 파일들을 모두 로딩한다. -->
		<async-supported>true</async-supported>
		<!-- 비동기적 로드를 사용하기 위한 태그이다. -->
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- servlet이 입력을 받아들이는 역할을 할 수 있게 url과 POJO프로젝트와의 연결점을 활성화 시킨다. -->
	<!-- /* 경로 지정 : 모든 경로를 디스패쳐가 담당한다. 이로 인해 POJO에서 리턴시킨 데이터도 servlet을 거쳐야 함으로 모든 url에 대한 선언이 필요하다.-->
	<!-- / 경로지정 : dispatcher파일에 선언되어 있는 경로는 디스패쳐가, 선언되지 않은 파일에 한해서는 원본 파일을 보내준다(but, 정적파일은 여전히 막는다.)  -->

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<!-- UTF-8로 인코딩 -->
	
	<filter> 
		<filter-name>MultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<!-- MultipartFile 형식 인코딩 필터 -->
	
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<!-- Security filter 추가 -->
	

	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>MultipartFilter</filter-name>
		<url-pattern>*.add</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	

	
	<!-- 브라우저 -> 요청정보 Body 데이터 -> UTF-8 인코딩 -> Spring Security Filtering -> Java단에서의 데이터 처리 
			CharacterencodingFilter : HTTP상에서 주고 받는 데이터의 헤더 값을 UTF-8로 인코딩
			위와 같이 web.xml단에서 filter 선언 시, 모든 컨트롤러에서 중복 encoding 선언을 하지 않아도 된다.
			해당 filter가 모든 url에 대해 인코딩될 수 있도록 /*와 같이 url-pattern을 설정한다.
			 ** 주의 : Spring Security 설정이 있는 경우 한글필터 설정이 springSecurityFilterchain 앞에 위치해야 한다.
			 
			DelegatingFilterProxy : Spring의 ApplicationContext에서 얻은 Filter Bean을 대신 실행하는 역할을 수행한다.
			이를 통해 Bean은 Spring Web ApplicationContext 라이프 사이클 지원 및 구성 유연성을 사용할 수 있다.
			Bean은 javax.servlet.Filter를 구현해야하며 filter-name 요소에 정의된 이름과 동일한 이름의 id를 가져야 한다.
			ex) <bean id="filter" class="org.springframework.security.web.FilterChainProxy" />
			위를 선언하는 이유는 DelegatingFilterProxy가 초기화 될때 자신의 이름과 같은 id를 가진 Bean을 찾아서 대리자로 등록하기 때문이다.
			FilterChainProxy는 SecurityFilterChain 리스트를 가지는데, 이는 네임스페이스 설정에서 <http> 요소 당 하나가 만들어진다고 볼 수 있다.
			SecurityFilterChain은 실제 일을 하는 스프링 시큐리티 리스트를 가지고 있다.
	-->


  <display-name>Welcome to Tomcat</display-name>
  <description>
     Welcome to Tomcat
  </description>

</web-app>
